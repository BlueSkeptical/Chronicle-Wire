/*
 * Copyright 2015 Higher Frequency Trading
 *
 * http://www.higherfrequencytrading.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.openhft.chronicle.wire;

import net.openhft.chronicle.bytes.NativeBytes;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class LongArrayTextReferenceTest {
    @Test
    public void getSetValues() throws Exception {
        int length = 128 * 22 + 47;
        try (NativeBytes bytes = NativeBytes.nativeBytes(length)) {
            LongArrayTextReference.write(bytes, 128);
            bytes.flip();
            LongArrayTextReference array = new LongArrayTextReference();
            array.bytesStore(bytes, 0, length);

            assertEquals(128, array.getCapacity());
            for (int i = 0; i < 128; i++)
                array.setValueAt(i, i + 1);

            for (int i = 0; i < 128; i++)
                assertEquals(i + 1, array.getValueAt(i));

            assertEquals("{ capacity: 00000000000000000128, values: [ 00000000000000000001, 00000000000000000002, 00000000000000000003, 00000000000000000004, 00000000000000000005, 00000000000000000006, 00000000000000000007, 00000000000000000008, 00000000000000000009, 00000000000000000010, 00000000000000000011, 00000000000000000012, 00000000000000000013, 00000000000000000014, 00000000000000000015, 00000000000000000016, 00000000000000000017, 00000000000000000018, 00000000000000000019, 00000000000000000020, 00000000000000000021, 00000000000000000022, 00000000000000000023, 00000000000000000024, 00000000000000000025, 00000000000000000026, 00000000000000000027, 00000000000000000028, 00000000000000000029, 00000000000000000030, 00000000000000000031, 00000000000000000032, 00000000000000000033, 00000000000000000034, 00000000000000000035, 00000000000000000036, 00000000000000000037, 00000000000000000038, 00000000000000000039, 00000000000000000040, 00000000000000000041, 00000000000000000042, 00000000000000000043, 00000000000000000044, 00000000000000000045, 00000000000000000046, 00000000000000000047, 00000000000000000048, 00000000000000000049, 00000000000000000050, 00000000000000000051, 00000000000000000052, 00000000000000000053, 00000000000000000054, 00000000000000000055, 00000000000000000056, 00000000000000000057, 00000000000000000058, 00000000000000000059, 00000000000000000060, 00000000000000000061, 00000000000000000062, 00000000000000000063, 00000000000000000064, 00000000000000000065, 00000000000000000066, 00000000000000000067, 00000000000000000068, 00000000000000000069, 00000000000000000070, 00000000000000000071, 00000000000000000072, 00000000000000000073, 00000000000000000074, 00000000000000000075, 00000000000000000076, 00000000000000000077, 00000000000000000078, 00000000000000000079, 00000000000000000080, 00000000000000000081, 00000000000000000082, 00000000000000000083, 00000000000000000084, 00000000000000000085, 00000000000000000086, 00000000000000000087, 00000000000000000088, 00000000000000000089, 00000000000000000090, 00000000000000000091, 00000000000000000092, 00000000000000000093, 00000000000000000094, 00000000000000000095, 00000000000000000096, 00000000000000000097, 00000000000000000098, 00000000000000000099, 00000000000000000100, 00000000000000000101, 00000000000000000102, 00000000000000000103, 00000000000000000104, 00000000000000000105, 00000000000000000106, 00000000000000000107, 00000000000000000108, 00000000000000000109, 00000000000000000110, 00000000000000000111, 00000000000000000112, 00000000000000000113, 00000000000000000114, 00000000000000000115, 00000000000000000116, 00000000000000000117, 00000000000000000118, 00000000000000000119, 00000000000000000120, 00000000000000000121, 00000000000000000122, 00000000000000000123, 00000000000000000124, 00000000000000000125, 00000000000000000126, 00000000000000000127, 00000000000000000128 ] }\n", bytes.toString());

        }
    }
}